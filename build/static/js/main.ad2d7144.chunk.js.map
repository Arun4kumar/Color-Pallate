{"version":3,"sources":["components/UI.js","components/ColorCard.js","App.js","reportWebVitals.js","index.js"],"names":["Button","styled","button","props","static","hover","Message","div","background","text","Container","Color","ColorCard","Pallate","App","useState","message","setMessage","colors","setColors","pallate","setPallate","func","a","data","model","axios","post","JSON","stringify","res","status","Error","result","console","log","document","body","onkeyup","e","keyCode","addEventListener","key","ans","x","rgbHex","copytoclip","undefined","navigator","clipboard","writeText","staticC","length","style","backgroundColor","display","padding","borderRadius","map","color","hexColor","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"8QAEaA,EAASC,IAAOC,OAAV,6SACG,SAACC,GAAD,OAAWA,EAAMC,UAWf,SAACD,GAAD,OAAWA,EAAME,SAI5BC,EAAUL,IAAOM,IAAV,wLAKE,SAACJ,GAAD,OAAWA,EAAMK,cAC5B,qBAAGC,QAIDC,EAAYT,IAAOM,IAAV,gNACA,SAACJ,GAAD,OAAWA,EAAMK,cC3B1BG,EAAQV,IAAOM,IAAV,wIAGI,SAACJ,GAAD,OAAWA,EAAMK,cAI1BI,EAAYX,IAAOM,IAAV,6NAUTM,EAAUZ,IAAOM,IAAV,sH,OCkGLO,MA/Gf,WACE,MAA8BC,qBAA9B,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA4BF,mBAAS,CACnC,CAAC,IAAK,GAAI,KACV,CAAC,IAAK,GAAI,KACV,CAAC,IAAK,GAAI,KACV,CAAC,IAAK,IAAK,KACX,CAAC,IAAK,IAAK,OALb,mBAAOG,EAAP,KAAeC,EAAf,KAOA,EAA8BJ,mBAAS,IAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACMC,EAAI,uCAAG,gCAAAC,EAAA,4DACC,2BAERC,EAAO,CACTC,MAAO,WAJE,kBAQSC,IAAMC,KAPd,2BAOyBH,EAAOI,KAAKC,UAAUL,IARhD,UASU,OADbM,EARG,QASDC,OATC,sBAUD,IAAIC,MAAM,sBAVT,wBAYYF,EAAIN,KAAKS,OAZrB,QAYHA,EAZG,OAaTd,EAAUc,GAbD,kDAeTC,QAAQC,IAAI,KAAMnB,SAfT,0DAAH,qDAmBVoB,SAASC,KAAKC,QAAU,SAAUC,GACd,KAAdA,EAAEC,SACJlB,KAGJc,SAASK,iBAAiB,WAAW,SAACF,GACpC,GAAc,MAAVA,EAAEG,KAAyB,MAAVH,EAAEG,IAAa,CAClC,IADkC,EAC9BC,EAAM,GADwB,cAEpBzB,GAFoB,IAElC,2BAAsB,CAAC,IAAd0B,EAAa,QACpBD,GAAG,WAAQE,YAAO,GAAD,OAAID,EAAE,GAAN,YAAYA,EAAE,GAAd,YAAoBA,EAAE,KAApC,MAH6B,8BAKlCE,EAAWH,GACX1B,OAAW8B,GACX1B,EAAWH,OAIf,IAAM4B,EAAa,SAACtB,GAClBwB,UAAUC,UAAUC,UAAU1B,GAC9BH,EAAW,KAGP8B,EAAO,WAAON,YAAO,GAAD,OACrB3B,EAAO,GAAG,GADW,YACLA,EAAO,GAAG,GADL,YACWA,EAAO,GAAG,MAEzCb,EAAK,WAAOwC,YAAO,GAAD,OAAI3B,EAAO,GAAG,GAAd,YAAoBA,EAAO,GAAG,GAA9B,YAAoCA,EAAO,GAAG,MAEtE,OACE,eAACR,EAAD,CAAWF,WAAW,UAAtB,UACGY,GAA8B,IAAnBA,EAAQgC,QAClB,cAAC9C,EAAD,CAASE,WAAW,QAAQC,KAAK,QAAjC,+CAIDO,GACC,eAACV,EAAD,CAASE,WAAW,QAAQC,KAAK,QAAjC,kBACQ,IACN,qBACE4C,MAAO,CACLC,gBAAgB,GAAD,OAAKtC,GACpBuC,QAAS,eACTC,QAAS,SACTC,aAAc,OALlB,SAQGzC,IACI,IAXT,8BAeF,yDACA,cAACH,EAAD,UACGK,EAAOwC,KAAI,SAACC,GACX,IAAMC,EAAQ,WAAOf,YAAO,GAAD,OAAIc,EAAM,GAAV,YAAgBA,EAAM,GAAtB,YAA4BA,EAAM,MAE7D,OACE,eAAC/C,EAAD,CACEiD,QAAS,WACPf,EAAWc,GACX3C,EAAW2C,IAHf,UAME,cAACjD,EAAD,CAAOH,WAAYoD,IAElBA,UAMT,eAAC5D,EAAD,CAAQ6D,QAASvC,EAAMlB,OAAQ+C,EAAS9C,MAAOA,EAA/C,UACG,IADH,sBAIA,uFACA,cAACC,EAAD,CAASE,WAAW,QAAQC,KAAK,OAAjC,4EClGSqD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFrC,SAASsC,eAAe,SAM1BZ,M","file":"static/js/main.ad2d7144.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const Button = styled.button`\r\n  background-color: ${(props) => props.static};\r\n  border: 0;\r\n  margin: 10px 0;\r\n  outline: 0;\r\n  border-radius: 5px;\r\n  text-align: center;\r\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);\r\n  color: white;\r\n  padding: 20px 100px;\r\n  font-size: 1.2rem;\r\n  &:hover {\r\n    background-color: ${(props) => props.hover};\r\n  }\r\n`;\r\n\r\nexport const Message = styled.div`\r\n  padding: 10px 30px;\r\n  margin: 20px 0;\r\n  display: inline-block;\r\n  border-radius: 30px;\r\n  background-color: ${(props) => props.background};\r\n  color: ${({ text }) => text};\r\n  text-align: center;\r\n`;\r\n\r\nexport const Container = styled.div`\r\n  background-color: ${(props) => props.background};\r\n  width: 100%;\r\n  min-height: 100vh;\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  background-repeat: repeat;\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Color = styled.div`\r\n  width: 150px;\r\n  height: 200px;\r\n  background-color: ${(props) => props.background};\r\n  margin-bottom: 10px;\r\n  border-radius: 5px;\r\n`;\r\nexport const ColorCard = styled.div`\r\n  width: 150px;\r\n  height: 230px;\r\n  margin: 25px 15px;\r\n  text-align: center;\r\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);\r\n  background-color: white;\r\n  padding: 5px;\r\n  border-radius: 10px;\r\n`;\r\nexport const Pallate = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex-wrap: wrap;\r\n  justify-content: center;\r\n`;\r\n","import axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport rgbHex from \"rgb-hex\";\r\nimport { Message, Button, Container } from \"./components/UI\";\r\nimport { ColorCard, Color, Pallate } from \"./components/ColorCard\";\r\n\r\nfunction App() {\r\n  const [message, setMessage] = useState();\r\n  const [colors, setColors] = useState([\r\n    [103, 74, 179],\r\n    [163, 72, 166],\r\n    [159, 99, 196],\r\n    [144, 117, 216],\r\n    [206, 162, 215],\r\n  ]);\r\n  const [pallate, setPallate] = useState([]);\r\n  const func = async () => {\r\n    const url = \"http://colormind.io/api/\";\r\n\r\n    let data = {\r\n      model: \"default\",\r\n    };\r\n\r\n    try {\r\n      const res = await axios.post(url, (data = JSON.stringify(data)));\r\n      if (res.status !== 200) {\r\n        throw new Error(\"Api Request Failed\");\r\n      }\r\n      const result = await res.data.result;\r\n      setColors(result);\r\n    } catch (error) {\r\n      console.log(error.message);\r\n    }\r\n  };\r\n\r\n  document.body.onkeyup = function (e) {\r\n    if (e.keyCode === 32) {\r\n      func();\r\n    }\r\n  };\r\n  document.addEventListener(\"keydown\", (e) => {\r\n    if (e.key === \"c\" || e.key === \"C\") {\r\n      let ans = \"\";\r\n      for (let x of colors) {\r\n        ans += `#${rgbHex(`${x[0]},${x[1]},${x[2]}`)} `;\r\n      }\r\n      copytoclip(ans);\r\n      setMessage(undefined);\r\n      setPallate(colors);\r\n    }\r\n  });\r\n\r\n  const copytoclip = (data) => {\r\n    navigator.clipboard.writeText(data);\r\n    setPallate([]);\r\n  };\r\n\r\n  const staticC = `#${rgbHex(\r\n    `${colors[0][0]},${colors[0][1]},${colors[0][2]}`\r\n  )}`;\r\n  const hover = `#${rgbHex(`${colors[1][0]},${colors[1][1]},${colors[1][2]}`)}`;\r\n\r\n  return (\r\n    <Container background=\"#98d5d5\">\r\n      {pallate && pallate.length !== 0 && (\r\n        <Message background=\"black\" text=\"white\">\r\n          Copied whole pallate to clipboard\r\n        </Message>\r\n      )}\r\n      {message && (\r\n        <Message background=\"black\" text=\"white\">\r\n          Color{\" \"}\r\n          <div\r\n            style={{\r\n              backgroundColor: `${message}`,\r\n              display: \"inline-block\",\r\n              padding: \"0 10px\",\r\n              borderRadius: \"6px\",\r\n            }}\r\n          >\r\n            {message}\r\n          </div>{\" \"}\r\n          copied to your clipboard\r\n        </Message>\r\n      )}\r\n      <h1>Color palette generator</h1>\r\n      <Pallate>\r\n        {colors.map((color) => {\r\n          const hexColor = `#${rgbHex(`${color[0]},${color[1]},${color[2]}`)}`;\r\n\r\n          return (\r\n            <ColorCard\r\n              onClick={() => {\r\n                copytoclip(hexColor);\r\n                setMessage(hexColor);\r\n              }}\r\n            >\r\n              <Color background={hexColor} />\r\n\r\n              {hexColor}\r\n            </ColorCard>\r\n          );\r\n        })}\r\n      </Pallate>\r\n\r\n      <Button onClick={func} static={staticC} hover={hover}>\r\n        {\" \"}\r\n        Generate Palette\r\n      </Button>\r\n      <h3>Or just press the \"Spacebar\" to generate new palette.</h3>\r\n      <Message background=\"white\" text=\"grey\">\r\n        Click to copy individual color & Press \"C\" to copy palette\r\n      </Message>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}