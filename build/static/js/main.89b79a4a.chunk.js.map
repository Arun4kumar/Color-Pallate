{"version":3,"sources":["components/UI.js","components/ColorCard.js","components/Spinner.js","App.js","index.js"],"names":["Button","styled","button","props","static","hover","Message","div","background","text","Container","GlobalStyle","createGlobalStyle","Color","ColorCard","Pallate","spin","keyframes","Spinner","border","App","useState","loading","setLoading","message","setMessage","colors","setColors","data","model","pallate","setPallate","func","a","axios","post","JSON","stringify","res","status","Error","result","console","log","document","body","onkeyup","e","keyCode","addEventListener","key","ans","x","rgbHex","copytoclip","undefined","navigator","clipboard","writeText","staticC","length","style","backgroundColor","display","padding","borderRadius","map","color","index","hexColor","onClick","disabled","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.89b79a4a.chunk.js","sourcesContent":["import styled, { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const Button = styled.button`\r\n  background-color: ${(props) => props.static};\r\n  border: 0;\r\n  margin: 10px 0;\r\n  outline: 0;\r\n  border-radius: 5px;\r\n  text-align: center;\r\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);\r\n  color: white;\r\n  padding: 20px 100px;\r\n  font-size: 1.2rem;\r\n  &:hover {\r\n    background-color: ${(props) => props.hover};\r\n  }\r\n`;\r\n\r\nexport const Message = styled.div`\r\n  padding: 10px 30px;\r\n  margin: 20px 0;\r\n  display: inline-block;\r\n  border-radius: 30px;\r\n  background-color: ${(props) => props.background};\r\n  color: ${({ text }) => text};\r\n  text-align: center;\r\n`;\r\n\r\nexport const Container = styled.div`\r\n  background-color: ${(props) => props.background};\r\n  width: 100%;\r\n  min-height: 100vh;\r\n\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  background-repeat: repeat;\r\n`;\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n  body {\r\n    margin: 0;\r\n    padding: 0;\r\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\r\n  }\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Color = styled.div`\r\n  width: 150px;\r\n  height: 200px;\r\n  background-color: ${(props) => props.background};\r\n  margin-bottom: 10px;\r\n  border-radius: 5px;\r\n`;\r\nexport const ColorCard = styled.div`\r\n  width: 150px;\r\n  height: 230px;\r\n  margin: 25px 15px;\r\n  text-align: center;\r\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);\r\n  background-color: white;\r\n  padding: 5px;\r\n  border-radius: 10px;\r\n`;\r\nexport const Pallate = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex-wrap: wrap;\r\n  justify-content: center;\r\n`;\r\n","import styled, { keyframes } from \"styled-components\";\r\nconst spin = keyframes`\r\n  0% {\r\n    transform: rotate(0deg);\r\n  }\r\n  100% {\r\n    transform: rotate(360deg);\r\n  }\r\n`;\r\nconst Spinner = styled.div`\r\n  width: 50px;\r\n  height: 50px;\r\n  border: 10px solid lightgrey;\r\n  border-right: 10px solid ${(props) => props.border};\r\n  border-radius: 50%;\r\n  animation: ${spin} 0.5s ease-in-out infinite;\r\n`;\r\n\r\nexport default Spinner;\r\n","import axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport rgbHex from \"rgb-hex\";\r\nimport { Message, Button, Container, GlobalStyle } from \"./components/UI\";\r\nimport { ColorCard, Color, Pallate } from \"./components/ColorCard\";\r\nimport Spinner from \"./components/Spinner\";\r\n\r\nfunction App() {\r\n  const [loading, setLoading] = useState(false);\r\n  const [message, setMessage] = useState();\r\n  const [colors, setColors] = useState([\r\n    [103, 74, 179],\r\n    [163, 72, 166],\r\n    [159, 99, 196],\r\n    [144, 117, 216],\r\n    [206, 162, 215],\r\n  ]);\r\n  const url = \"/api/\";\r\n\r\n  let data = {\r\n    model: \"default\",\r\n  };\r\n  const [pallate, setPallate] = useState([]);\r\n  const func = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const res = await axios.post(url, (data = JSON.stringify(data)));\r\n      if (res.status !== 200) {\r\n        throw new Error(\"Api Request Failed\");\r\n      }\r\n      const result = await res.data.result;\r\n      console.log(result);\r\n      setColors(result);\r\n      setLoading(false);\r\n    } catch (error) {\r\n      console.log(error.message);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  document.body.onkeyup = function (e) {\r\n    if (e.keyCode === 32) {\r\n      func();\r\n    }\r\n  };\r\n  document.addEventListener(\"keydown\", (e) => {\r\n    if (e.key === \"c\" || e.key === \"C\") {\r\n      let ans = \"\";\r\n      for (let x of colors) {\r\n        ans += `#${rgbHex(`${x[0]},${x[1]},${x[2]}`)} `;\r\n      }\r\n      copytoclip(ans);\r\n      setMessage(undefined);\r\n      setPallate(colors);\r\n    }\r\n  });\r\n\r\n  const copytoclip = (data) => {\r\n    navigator.clipboard.writeText(data);\r\n    setPallate([]);\r\n  };\r\n\r\n  const staticC = `#${rgbHex(\r\n    `${colors[0][0]},${colors[0][1]},${colors[0][2]}`\r\n  )}`;\r\n  const hover = `#${rgbHex(`${colors[1][0]},${colors[1][1]},${colors[1][2]}`)}`;\r\n\r\n  return (\r\n    <>\r\n      <GlobalStyle />\r\n      <Container background=\"#98d5d5\">\r\n        {pallate && pallate.length !== 0 && (\r\n          <Message background=\"black\" text=\"white\">\r\n            Copied whole pallate to clipboard\r\n          </Message>\r\n        )}\r\n        {message && (\r\n          <Message background=\"black\" text=\"white\">\r\n            Color\r\n            <div\r\n              style={{\r\n                backgroundColor: `${message}`,\r\n                display: \"inline-block\",\r\n                padding: \"0 10px\",\r\n                borderRadius: \"6px\",\r\n              }}\r\n            >\r\n              {message}\r\n            </div>\r\n            copied to your clipboard\r\n          </Message>\r\n        )}\r\n        <h1>Color palette generator</h1>\r\n        <Pallate>\r\n          {colors.map((color, index) => {\r\n            const hexColor = `#${rgbHex(\r\n              `${color[0]},${color[1]},${color[2]}`\r\n            )}`;\r\n\r\n            return (\r\n              <ColorCard\r\n                key={index}\r\n                onClick={() => {\r\n                  copytoclip(hexColor);\r\n                  setMessage(hexColor);\r\n                }}\r\n              >\r\n                <Color background={hexColor} />\r\n\r\n                {hexColor}\r\n              </ColorCard>\r\n            );\r\n          })}\r\n        </Pallate>\r\n\r\n        <Button\r\n          disabled={loading}\r\n          onClick={func}\r\n          static={staticC}\r\n          hover={hover}\r\n        >\r\n          {loading ? (\r\n            <Spinner\r\n              border={`#${rgbHex(\r\n                `${colors[4][0]},${colors[4][1]},${colors[4][2]}`\r\n              )}`}\r\n            />\r\n          ) : (\r\n            \"Generate Palette\"\r\n          )}\r\n        </Button>\r\n        <h3>Or just press the \"Spacebar\" to generate new palette.</h3>\r\n        <Message background=\"white\" text=\"grey\">\r\n          Click to copy individual color & Press \"C\" to copy palette\r\n        </Message>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n"],"sourceRoot":""}